basePath: /api
definitions:
  entity.EmployeeTaskKanbanEnum:
    enum:
    - TO_DO
    - IN_PROGRESS
    - NEED_REVIEW
    - COMPLETED
    type: string
    x-enum-varnames:
    - EMPLOYEE_TASK_KANBAN_ENUM_TODO
    - EPMLOYEE_TASK_KANBAN_ENUM_IN_PROGRESS
    - EMPLOYEE_TASK_KANBAN_ENUM_NEED_REVIEW
    - EMPLOYEE_TASK_KANBAN_ENUM_COMPLETED
  entity.EmployeeTaskPriorityEnum:
    enum:
    - LOW
    - MEDIUM
    - HIGH
    type: string
    x-enum-varnames:
    - EMPLOYEE_TASK_PRIORITY_ENUM_LOW
    - EMPLOYEE_TASK_PRIORITY_ENUM_MEDIUM
    - EMPLOYEE_TASK_PRIORITY_ENUM_HIGH
  entity.EmployeeTaskStatusEnum:
    enum:
    - ACTIVE
    - INACTIVE
    type: string
    x-enum-varnames:
    - EMPLOYEE_TASK_STATUS_ENUM_ACTIVE
    - EMPLOYEE_TASK_STATUS_ENUM_INACTIVE
  entity.EventStatusEnum:
    enum:
    - UPCOMING
    - ONGOING
    - FINISHED
    type: string
    x-enum-varnames:
    - EVENT_STATUS_ENUM_UPCOMING
    - EVENT_STATUS_ENUM_ONGOING
    - EVENT_STATUS_ENUM_FINISHED
  entity.TemplateTaskPriorityEnum:
    enum:
    - LOW
    - MEDIUM
    - HIGH
    type: string
    x-enum-varnames:
    - TEMPLATE_TASK_PRIORITY_ENUM_LOW
    - TEMPLATE_TASK_PRIORITY_ENUM_MEDIUM
    - TEMPLATE_TASK_PRIORITY_ENUM_HIGH
  entity.TemplateTaskStatusEnum:
    enum:
    - ACTIVE
    - INACTIVE
    type: string
    x-enum-varnames:
    - TEMPLATE_TASK_STATUS_ENUM_ACTIVE
    - TEMPLATE_TASK_STATUS_ENUM_INACTIVE
  multipart.FileHeader:
    properties:
      filename:
        type: string
      header:
        $ref: '#/definitions/textproto.MIMEHeader'
      size:
        type: integer
    type: object
  request.CreateEmployeeTaskRequest:
    properties:
      cover_path:
        type: string
      description:
        type: string
      employee_id:
        type: string
      employee_task_attachments:
        items:
          $ref: '#/definitions/request.EmployeeTaskAttachmentRequest'
        type: array
      employee_task_checklists:
        items:
          $ref: '#/definitions/request.EmployeeTaskChecklistRequest'
        type: array
      end_date:
        type: string
      name:
        type: string
      priority:
        type: string
      start_date:
        type: string
      template_task_id:
        type: string
    required:
    - cover_path
    - employee_id
    - end_date
    - name
    - priority
    - start_date
    type: object
  request.CreateEventRequest:
    properties:
      description:
        type: string
      end_date:
        type: string
      event_employees:
        items:
          properties:
            employee_id:
              type: string
          required:
          - employee_id
          type: object
        type: array
      name:
        type: string
      start_date:
        type: string
      status:
        type: string
      template_task_id:
        type: string
    required:
    - end_date
    - event_employees
    - name
    - start_date
    - template_task_id
    type: object
  request.CreateTemplateTaskRequest:
    properties:
      cover_path:
        description: CoverFile               *multipart.FileHeader           `form:"cover_file"
          validate:"required"`
        type: string
      description:
        type: string
      due_duration:
        type: integer
      name:
        type: string
      priority:
        type: string
      status:
        type: string
      template_task_attachments:
        items:
          $ref: '#/definitions/request.TemplateTaskAttachmentRequest'
        type: array
      template_task_checklists:
        items:
          $ref: '#/definitions/request.TemplateTaskChecklistRequest'
        type: array
    required:
    - cover_path
    - name
    - priority
    - status
    type: object
  request.EmployeeTaskAttachmentRequest:
    properties:
      file:
        $ref: '#/definitions/multipart.FileHeader'
      path:
        type: string
    required:
    - file
    type: object
  request.EmployeeTaskChecklistRequest:
    properties:
      id:
        type: string
      is_checked:
        type: string
      name:
        type: string
      verified_by:
        type: string
    required:
    - name
    type: object
  request.TemplateTaskAttachmentRequest:
    properties:
      file:
        $ref: '#/definitions/multipart.FileHeader'
      path:
        type: string
    required:
    - file
    type: object
  request.TemplateTaskChecklistRequest:
    properties:
      id:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  request.UpdateEmployeeTaskRequest:
    properties:
      cover_path:
        type: string
      description:
        type: string
      employee_id:
        type: string
      employee_task_attachments:
        items:
          $ref: '#/definitions/request.EmployeeTaskAttachmentRequest'
        type: array
      employee_task_checklists:
        items:
          $ref: '#/definitions/request.EmployeeTaskChecklistRequest'
        type: array
      end_date:
        type: string
      id:
        type: string
      is_done:
        enum:
        - "YES"
        - "NO"
        type: string
      kanban:
        type: string
      name:
        type: string
      notes:
        type: string
      priority:
        type: string
      proof:
        $ref: '#/definitions/multipart.FileHeader'
      proof_path:
        type: string
      start_date:
        type: string
      status:
        type: string
      template_task_id:
        type: string
      verified_by:
        type: string
    required:
    - cover_path
    - employee_id
    - end_date
    - id
    - name
    - priority
    - start_date
    type: object
  request.UpdateEventRequest:
    properties:
      description:
        type: string
      end_date:
        type: string
      event_employees:
        items:
          properties:
            employee_id:
              type: string
          required:
          - employee_id
          type: object
        type: array
      id:
        type: string
      name:
        type: string
      start_date:
        type: string
      status:
        type: string
      template_task_id:
        type: string
    required:
    - end_date
    - event_employees
    - id
    - name
    - start_date
    - template_task_id
    type: object
  request.UpdateTemplateTaskRequest:
    properties:
      cover_path:
        description: CoverFile               *multipart.FileHeader           `form:"cover_file"
          validate:"required"`
        type: string
      description:
        type: string
      due_duration:
        type: integer
      id:
        type: string
      name:
        type: string
      priority:
        type: string
      status:
        type: string
      template_task_attachments:
        items:
          $ref: '#/definitions/request.TemplateTaskAttachmentRequest'
        type: array
      template_task_checklists:
        items:
          $ref: '#/definitions/request.TemplateTaskChecklistRequest'
        type: array
    required:
    - cover_path
    - id
    - name
    - priority
    - status
    type: object
  response.CoverResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      path:
        type: string
      path_origin:
        type: string
      updated_at:
        type: string
    type: object
  response.EmployeeTaskAttachmentResponse:
    properties:
      created_at:
        type: string
      employee_task_id:
        type: string
      id:
        type: string
      path:
        type: string
      path_origin:
        type: string
      updated_at:
        type: string
    type: object
  response.EmployeeTaskChecklistResponse:
    properties:
      created_at:
        type: string
      employee_task_id:
        type: string
      id:
        type: string
      is_checked:
        type: string
      name:
        type: string
      updated_at:
        type: string
      verified_by:
        type: string
      verified_by_name:
        type: string
    type: object
  response.EmployeeTaskProgressResponse:
    properties:
      completed:
        type: integer
      employee_id:
        type: string
      in_progress:
        type: integer
      need_review:
        type: integer
      to_do:
        type: integer
      total_task:
        type: integer
    type: object
  response.EmployeeTaskResponse:
    properties:
      cover_path:
        type: string
      created_at:
        type: string
      description:
        type: string
      employee_id:
        type: string
      employee_name:
        type: string
      employee_task_attachments:
        items:
          $ref: '#/definitions/response.EmployeeTaskAttachmentResponse'
        type: array
      employee_task_checklists:
        items:
          $ref: '#/definitions/response.EmployeeTaskChecklistResponse'
        type: array
      end_date:
        type: string
      id:
        type: string
      is_done:
        type: string
      kanban:
        $ref: '#/definitions/entity.EmployeeTaskKanbanEnum'
      name:
        type: string
      notes:
        type: string
      priority:
        $ref: '#/definitions/entity.EmployeeTaskPriorityEnum'
      progress:
        type: integer
      progress_verified:
        type: integer
      proof:
        type: string
      source:
        type: string
      start_date:
        type: string
      status:
        $ref: '#/definitions/entity.EmployeeTaskStatusEnum'
      template_task:
        $ref: '#/definitions/response.TemplateTaskResponse'
      template_task_id:
        type: string
      updated_at:
        type: string
      verified_by:
        type: string
      verified_by_name:
        type: string
    type: object
  response.EventEmployeeResponse:
    properties:
      created_at:
        type: string
      employee_id:
        type: string
      employee_name:
        type: string
      event_id:
        type: string
      id:
        type: string
      updated_at:
        type: string
    type: object
  response.EventResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      end_date:
        type: string
      event_employees:
        items:
          $ref: '#/definitions/response.EventEmployeeResponse'
        type: array
      id:
        type: string
      name:
        type: string
      start_date:
        type: string
      status:
        $ref: '#/definitions/entity.EventStatusEnum'
      template_task:
        $ref: '#/definitions/response.TemplateTaskResponse'
      template_task_id:
        type: string
      updated_at:
        type: string
    type: object
  response.TemplateTaskAttachmentResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      path:
        type: string
      path_origin:
        type: string
      template_task_id:
        type: string
      updated_at:
        type: string
    type: object
  response.TemplateTaskChecklistResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      template_task_id:
        type: string
      updated_at:
        type: string
    type: object
  response.TemplateTaskResponse:
    properties:
      cover_path_origin:
        type: string
      coverPath:
        type: string
      created_at:
        type: string
      description:
        type: string
      due_duration:
        type: integer
      id:
        type: string
      name:
        type: string
      priority:
        $ref: '#/definitions/entity.TemplateTaskPriorityEnum'
      source:
        type: string
      status:
        $ref: '#/definitions/entity.TemplateTaskStatusEnum'
      template_task_attachments:
        items:
          $ref: '#/definitions/response.TemplateTaskAttachmentResponse'
        type: array
      template_task_checklists:
        items:
          $ref: '#/definitions/response.TemplateTaskChecklistResponse'
        type: array
      updated_at:
        type: string
    type: object
  response.UniversityResponse:
    properties:
      alpha_two_code:
        type: string
      country:
        type: string
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  textproto.MIMEHeader:
    additionalProperties:
      items:
        type: string
      type: array
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8001
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Julong Onboarding API Docs
  version: "1.0"
paths:
  /api/employee-task-attachments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete employee task attachment by ID
      parameters:
      - description: Employee Task Attachment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success delete employee task attachment
          schema:
            type: string
      summary: Delete employee task attachment by ID
      tags:
      - Employee Task Attachments
    get:
      consumes:
      - application/json
      description: Find employee task attachment by ID
      parameters:
      - description: Employee Task Attachment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.EmployeeTaskAttachmentResponse'
      summary: Find employee task attachment by ID
      tags:
      - Employee Task Attachments
  /api/template-task-attachments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete template task attachment by ID
      parameters:
      - description: Template Task Attachment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: success delete template task attachment
          schema:
            type: string
      summary: Delete template task attachment by ID
      tags:
      - Template Task Attachments
    get:
      consumes:
      - application/json
      description: Find template task attachment by ID
      parameters:
      - description: Template Task Attachment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.TemplateTaskAttachmentResponse'
      summary: Find template task attachment by ID
      tags:
      - Template Task Attachments
  /covers:
    get:
      consumes:
      - application/json
      description: Find all covers with pagination
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page Size
        in: query
        name: page_size
        type: integer
      - description: Search
        in: query
        name: search
        type: string
      - description: Created At
        in: query
        name: created_at
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CoverResponse'
      security:
      - BearerAuth: []
      summary: Find all covers with pagination
      tags:
      - Covers
    post:
      consumes:
      - multipart/form-data
      description: Create a new cover
      parameters:
      - description: File
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.CoverResponse'
      security:
      - BearerAuth: []
      summary: Create a new cover
      tags:
      - Covers
  /covers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete cover by id
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete cover by id
      tags:
      - Covers
    get:
      consumes:
      - application/json
      description: Find cover by id
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CoverResponse'
      security:
      - BearerAuth: []
      summary: Find cover by id
      tags:
      - Covers
  /covers/update:
    put:
      consumes:
      - multipart/form-data
      description: Update cover by id
      parameters:
      - description: ID
        in: formData
        name: id
        required: true
        type: string
      - description: File
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CoverResponse'
      security:
      - BearerAuth: []
      summary: Update cover by id
      tags:
      - Covers
  /covers/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload cover
      parameters:
      - description: File
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.CoverResponse'
      security:
      - BearerAuth: []
      summary: Upload cover
      tags:
      - Covers
  /employee-tasks:
    get:
      consumes:
      - application/json
      description: Find all employee task paginated
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page Size
        in: query
        name: page_size
        type: integer
      - description: Search
        in: query
        name: search
        type: string
      - description: Created At
        in: query
        name: created_at
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.EmployeeTaskResponse'
      security:
      - BearerAuth: []
      summary: Find all employee task paginated
      tags:
      - Employee Task
    post:
      consumes:
      - multipart/form-data
      description: Create new employee task
      parameters:
      - description: Create Template Task
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.CreateEmployeeTaskRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.EmployeeTaskResponse'
      security:
      - BearerAuth: []
      summary: Create new employee task
      tags:
      - Employee Task
  /employee-tasks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete employee task
      parameters:
      - description: Employee Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success delete employee task
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete employee task
      tags:
      - Employee Task
    get:
      consumes:
      - application/json
      description: Find employee task by id
      parameters:
      - description: Employee Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.EmployeeTaskResponse'
      security:
      - BearerAuth: []
      summary: Find employee task by id
      tags:
      - Employee Task
    put:
      consumes:
      - multipart/form-data
      description: Update employee task
      parameters:
      - description: Employee Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Employee Task
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.UpdateEmployeeTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.EmployeeTaskResponse'
      security:
      - BearerAuth: []
      summary: Update employee task
      tags:
      - Employee Task
  /employee-tasks/count:
    get:
      consumes:
      - application/json
      description: Count employee task by kanban and employee id
      parameters:
      - description: Kanban
        in: query
        name: kanban
        required: true
        type: string
      - description: Employee ID
        in: query
        name: employee_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.EmployeeTaskResponse'
      security:
      - BearerAuth: []
      summary: Count employee task by kanban and employee id
      tags:
      - Employee Task
  /employee-tasks/employee:
    get:
      consumes:
      - application/json
      description: Find all employee task by employee id
      parameters:
      - description: Employee ID
        in: query
        name: employee_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.EmployeeTaskResponse'
      security:
      - BearerAuth: []
      summary: Find all employee task by employee id
      tags:
      - Employee Task
  /employee-tasks/employee-kanban:
    get:
      consumes:
      - application/json
      description: Find all employee task by employee id and kanban paginated
      parameters:
      - description: Employee ID
        in: query
        name: employee_id
        required: true
        type: string
      - description: Kanban
        in: query
        name: kanban
        required: true
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page Size
        in: query
        name: page_size
        type: integer
      - description: Search
        in: query
        name: search
        type: string
      - description: Created At
        in: query
        name: created_at
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.EmployeeTaskResponse'
      security:
      - BearerAuth: []
      summary: Find all employee task by employee id and kanban paginated
      tags:
      - Employee Task
  /employee-tasks/employee-kanban/count:
    get:
      consumes:
      - application/json
      description: Count kanban progress by employee id
      parameters:
      - description: Employee ID
        in: query
        name: employee_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.EmployeeTaskProgressResponse'
      security:
      - BearerAuth: []
      summary: Count kanban progress by employee id
      tags:
      - Employee Task
  /events:
    get:
      consumes:
      - application/json
      description: Find all events with pagination
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page Size
        in: query
        name: page_size
        type: integer
      - description: Search
        in: query
        name: search
        type: string
      - description: Created At
        in: query
        name: created_at
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.EventResponse'
      summary: Find all events with pagination
      tags:
      - Events
    post:
      consumes:
      - application/json
      description: Create a new event
      parameters:
      - description: Event data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/request.CreateEventRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.EventResponse'
      security:
      - BearerAuth: []
      summary: Create a new event
      tags:
      - Events
    put:
      consumes:
      - application/json
      description: Update an event
      parameters:
      - description: Event data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/request.UpdateEventRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.EventResponse'
      security:
      - BearerAuth: []
      summary: Update an event
      tags:
      - Events
  /events/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Event deleted
      security:
      - BearerAuth: []
      summary: Delete an event
      tags:
      - Events
    get:
      consumes:
      - application/json
      description: Find an event by ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.EventResponse'
      summary: Find an event by ID
      tags:
      - Events
  /template-tasks:
    get:
      consumes:
      - application/json
      description: Find all template tasks with pagination
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page Size
        in: query
        name: page_size
        type: integer
      - description: Search
        in: query
        name: search
        type: string
      - description: Created At
        in: query
        name: created_at
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.TemplateTaskResponse'
      security:
      - BearerAuth: []
      summary: Find all template tasks with pagination
      tags:
      - Template Tasks
    post:
      consumes:
      - multipart/form-data
      description: Create new template task
      parameters:
      - description: Create Template Task
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.CreateTemplateTaskRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.TemplateTaskResponse'
      security:
      - BearerAuth: []
      summary: Create new template task
      tags:
      - Template Tasks
  /template-tasks/{id}:
    delete:
      description: Delete template task by id
      parameters:
      - description: Template Task ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete template task by id
      tags:
      - Template Tasks
    get:
      description: Find template task by id
      parameters:
      - description: Template Task ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.TemplateTaskResponse'
      security:
      - BearerAuth: []
      summary: Find template task by id
      tags:
      - Template Tasks
  /template-tasks/update:
    put:
      consumes:
      - multipart/form-data
      description: Update template task by id
      parameters:
      - description: Update Template Task
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.UpdateTemplateTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.TemplateTaskResponse'
      security:
      - BearerAuth: []
      summary: Update template task by id
      tags:
      - Template Tasks
  /universities:
    get:
      consumes:
      - application/json
      description: Find all universities
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UniversityResponse'
      security:
      - BearerAuth: []
      summary: Find all universities
      tags:
      - Universities
securityDefinitions:
  BearerAuth:
    description: Bearer token for authentication
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
